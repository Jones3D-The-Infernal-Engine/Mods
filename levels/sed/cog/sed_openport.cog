# SED COG Script
# Script for opening portal and braking open underwater tunnel
#
# user0: open portal
# user1: 2 sec earthquake
#
# [Crt Vavros]
# ===================================================================

symbols
    message startup
    message user0
    message user1
    message pulse
    message timer

    thing tunnelCamSpot nolink
    thing tunnelCamLook nolink
    thing tunnelWallPos nolink
    thing tunnelDustPos nolink

    surface tunnelWallSurf1 nolink
    surface tunnelWallSurf2 nolink
    surface tunnelWallSurf3 nolink
    surface tunnelWallSurf4 nolink
    surface tunnelWallSurf5 nolink
    surface tunnelWallSurf6 nolink

    thing player     nolink local
    thing dust       nolink local
    thing debrisFrag nolink local
    thing bubble            local

    template tmplDust=dustcloud             local
    template tmplDebris=stnshrapcs_nc_ns_nl local
    template tplBubble=+bubbles             local

    sound quakeSnd=nub_bull_move1_c.wav    local
    sound uwRumble=nub_bull_move2_c.wav    local
    sound uwExplosion=lag_torp_explo_c.wav local
    sound musAwesome=mus_gen_awesome3.wav  local
    sound inSurprized=sedxj05a.wav         local # whoa! what was that?

    material matDust=gen_a4sfx_dustcloud.mat local

    # local vars
    int bOpened=0       local
    int bQuakeActive=0  local

    int i               local
    int j               local
    int vibe            local
    int quakeSound      local
    int rumbleSound     local
    int moveStatus      local
    vector camPosOffset local
    vector camAngOffset local
    vector dustPos      local
    vector bubbleVel    local

    # subroutines
    flex StartQuake local
    flex StopQuake  local
end

code
    startup:
        Sleep(0.1); # wait system init a little bit
        player = GetLocalPlayerThing();

        # Build the tunnel wall
        for (i = 0; i < 6; i = i + 1)
        {
            SetFaceGeoMode(tunnelWallSurf1[i], 4);
            SetSurfaceFlags(tunnelWallSurf1[i], 0x4);
            ClearAdjoinFlags(tunnelWallSurf1[i], 0x3); # SITH_ADJOIN_VISIBLE | SITH_ADJOIN_MOVE
        }
    return;

    user0:
        if (bOpened) return;
        bOpened = 1;

        Call StartQuake;
        Sleep(3);

        # Wait for player to stop pushing/puling object
        moveStatus = GetMoveStatus(player);
        while (moveStatus == 7 || moveStatus == 8)  # SITHPLAYERMOVE_PUSHING = 7 || SITHPLAYERMOVE_PULLING = 8
        {
            Sleep(0.5);
            moveStatus = GetMoveStatus(player);
        }

        StartCutscene(1);
        PlaySoundLocal(musAwesome, 0.8, 0, 0x0, 0);

        # Move into water and show tunnel
        SetCameraLookInterp(2, 0);
        SetCameraPosInterp(2, 0);
        SetCameraFocus(2, tunnelCamSpot);
        SetCameraSecondaryFocus(2, tunnelCamLook);
        SetCurrentCamera(2);
        SetCameraFOV(90, 0, 0.0);
        SetCameraFOV(75, 1, 9.5);

        MakeMeStop(); # Disable controls
        Sleep(1.2);
        rumbleSound = PlaySoundLocal(uwRumble, 8, 0, 0x01, 0);

        # Create debris & dust
        for (i = 0; i < 10; i = i + 1)
        {
            dustPos = VectorAdd(GetThingPos(tunnelDustPos), VectorScale(RandVec(), -0.3 + 0.3 * rand()));
            dust = CreateThingAtPos(tmplDust, GetThingSector(tunnelDustPos), dustPos, '0 0 0');
            SetLifeLeft(dust, 9.7);
            AnimateSpriteSize(dust, '0.1 0.1 0.45', '1.5 1.5 0.6', 5.5);
            SetThingVel(dust, '0.0 0.0 -0.13');

            for (j = 0; j < 2; j = j + 1)
            {
                dustPos = VectorAdd(GetThingPos(tunnelWallPos), VectorScale(RandVec(), -0.3 + 0.3 * rand()));
                debrisFrag = CreateThingAtPos(tmplDebris, GetThingSector(tunnelWallPos), dustPos, RandVec());
                ParseArg(debrisFrag, "timer=3.5 buoyancy=0.45 light=(0.1/0.1/0.1/0.01)");
                SetThingVel(debrisFrag, VectorSet(0, 0,  -0.3 + 0.2 * rand()));
                SetThingRotVel(debrisFrag, VectorScale(RandVec(), 90.0));
                Sleep(0.1);
            }

            Sleep(0.1);
        }
        MaterialAnim(matDust, 8.0, 0);

        for (i = 0; i < 50; i = i + 1)
        {
            debrisFrag = CreateThing(tmplDebris, tunnelWallPos);
            ParseArg(debrisFrag, "timer=3.5 buoyancy=0.4 light=(0.1/0.1/0.1/0.01)");
            SetThingVel(debrisFrag, VectorScale(VectorAdd(RandVec(), VectorSet(-2.6 + 5.2 * rand(), -1.3, -0.3 + 0.2 * rand())), 1 ));
            SetThingRotVel(debrisFrag, VectorScale(RandVec(), 90.0));
        }

        # Brake through tunnel wall
        PlaySoundLocal(uwExplosion, 8, -1, 0x00, 0);
        for (i = 0; i < 6; i = i + 1)
        {
            SetFaceGeoMode(tunnelWallSurf1[i], 0);
            SetAdjoinFlags(tunnelWallSurf1[i], 0x3); # SITH_ADJOIN_VISIBLE | SITH_ADJOIN_MOVE
        }

        for (j = 0; j < 100; j = j + 1)
        {
            # Make a bubble
            bubble = CreateThing(tplBubble, tunnelWallPos);

            # Set the life left to a random value
            SetLifeLeft(bubble, Rand() * 3.0);

            # Set it to die when it hits air
            SetThingFlags(bubble, 0x10000000);

            # Animate the bubble sprite
            AnimateSpriteSize(bubble, '0.001 0.001 1.0', '0.01 0.01 1.0', 0.8);

            # Set the bubble to a random velocity
            bubbleVel = VectorSet(Rand() - 0.35, Rand() - 0.35, Rand() - 0.5);
            bubbleVel = VectorScale(bubbleVel, 0.4);
            if (Rand() < 0.5)
            {
                bubbleVel = VectorSet(-VectorX(bubbleVel), VectorY(bubbleVel), -VectorZ(bubbleVel));
            }
            if (Rand() < 0.5)
            {
                bubbleVel = VectorSet(VectorX(bubbleVel), -VectorY(bubbleVel), VectorZ(bubbleVel));
            }
            SetThingVel(bubble, bubbleVel);
            Sleep(0.01);
        }

        StopSound(rumbleSound, 5.5);
        Sleep(5.5);

        # Move cam back to player
        SetCurrentCamera(1);
        ResetCameraFOV(0, 0);
        EndCutscene();

        ClearActorFlags(player, 0x200000); # enable controls
        Sleep(1.2);
        Call StopQuake;
        Sleep(1);

        if (!BitTest(GetThingFlags(player), 0x2000000) && GetThingAttachFlags(player) != 0 ) { # if not swimming and not in the air
            PlayVoice(player, inSurprized, 1.0, 0);
        }
    return;

    user1:
        Call StartQuake;
        SetTimer(2);
    return;

    timer:
        Call StopQuake;
    return;

    StartQuake:
        if (!bQuakeActive)
        {
            bQuakeActive = 1;
            SetPulse(0.01); # start camera shake
            quakeSound = PlaySoundLocal(quakeSnd, 8, -1, 0x01, 0);
        }
    return;

    StopQuake:
        if (bQuakeActive)
        {
            StopSound(quakeSound, 3.0);
            Sleep(1.2);
            SetPulse(0.0);
            bQuakeActive = 0;
        }
    return;

    pulse:
        # Code for trembling view camera
        vibe = RandBetween(1, 4);
        if (vibe == 1)
        {
            camPosOffset = '-0.005 0.00 -0.001';
            camAngOffset = '0.00 -0.001 0.001';
        }
        else if (vibe == 2)
        {
            camPosOffset = '0.005 -0.002 0.001';
            camAngOffset = '0.001 0.00 -0.001';
        }
        else if (vibe == 3)
        {
            camPosOffset = '0.002 0.002 -0.002';
            camAngOffset = '-0.001 0.002 -0.002';
        }
        else if (vibe == 4)
        {
            camPosOffset = '-0.001 0.00 0.002';
            camAngOffset = '0.00 0.00 0.001';
        }

        vibe = RandBetween(1, 3);
        if (vibe == 1)
        {
            SetPulse(0.05);
        }
        else if (vibe == 2)
        {
            SetPulse(0.1);
        }
        else if (vibe == 3)
        {
            SetPulse(0.15);
        }

        SetPOVShake(camPosOffset, camAngOffset, 200.0, 200.0);
    return;
end